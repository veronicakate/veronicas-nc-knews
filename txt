* find out what the thing does or needs to do
* name the thing you want to build
* work out where it needs to live in the file structure (and why!)
* Difference between where the component lives or is created and where it is used!
* state how the thing should be doing what it needs to do
* draw a diagram or flow to show how the different stages are linked together



* component did mount- mounts and fetches single article for example
* write articlethen submit- 201 response hopefully
* on that response will be body with id
* with that id navigate to article/id



    
         
          {/* //<Link to={`/articles/`} />,
//           (
//             <li key={article.article_id}>
//               <p>{article.title}</p>
//               {loggedInUser && <button> delete that article </button>})}
//             </li>
//           )
//         );
//       })}
//     </div> */}
{/* 
// export default function StudentList({ studentList }) { */}
{/* //   //  console.log("***", studentList[0]);
//   return (
//     <div>
//       {studentList.map((student, index) => (
//         <StudentCard student={student} key={index} />
//       ))}
//     </div>
//   ); */}

  {/* //<StudentCard id="student" student={studentList[0]} />; // represents 1 studens
//} */}





errors... 404- non existent id 999 / non existent username / comments with id not existent/ 


const body = [...document.getElementByTageName('body')][0]
On click- make sure element is in scope- const emoji = document.getElementById('smiley')
function makeItAngrier () {
  if(emoji.innertext === 'smiley img') {
    emoji.innertext = 'anrgy img'
    if(!angrymessage){
    const newTag = document.createElement('p')
    newTag.innerText = 'angry now'
    newTag.setAttribute('id','angrymessage')
    body.appendChild(newTag);
  } else {
  emoji.innertext = 'insert emoji image'
  body.removechild(angrymessage)
}
}}
emoji.addEventListener('click', makeItAngrier)





const form = document.querySelector('#loginform');
form.addEventListener('submit', () => {
  console.log()
})



**handling submit of log in password form.....

const handleSubmit = event => {
  event.preventDefault();
  console.log(event)
  fetch('url'), {
method: 'POST',
headers: {
  'conent type: 'application/json'
}
body.json.stringify({username: 'jessjelly' password: 'password123'})
  }) .then(buffer => {
    return buffer.json();
  }).then(response => {
    console.log(response)
  })
}


** value instead of inner text when in password boxes
const validatePassword = event => {
  if (/d+[a-z]+[a-z]+\d+/gi.test(passwordInput.value)) {
passwordInput.setAttribute('class', 'valid')
  } else {
passwordInput.setAttribute('class', 'invalid')
  }
}

** in css .invalid (give color of red)
** if .valid color green






single artilce----
// {/* // {this.props.isLoggedIn === article.author && ( */}
//   <button onClick={() =>{
// //     handleDelete(article.article_id)
// //   }}
// // > delete article </button>
// // )}











// class NewArticleForm extends Component {
//   state = {
//     title: "",
//     body: "",
//     author: "",
//     topic: "",
//     showArticle: false,
//     isThereAnError: false,
//     error: ""
//   };
//   render() {
//     const { body, title, showArticle, isThereAnError, error } = this.state;
//     const { topics, user } = this.props;
//     if (isThereAnError) return <ShowError error={error} />;
//     return (
//       <div>
//         <button onClick={this.toggleArticle}>
//           {" "}
//           {showArticle ? "Cancel" : `Add an article?`}
//         </button>
//         {showArticle && (
//           <form className="articleForm" onSubmit={this.handleSubmit}>
//             <label> Topic</label>
//             )}
//             <select onChange={this.handleChange} name="topic">
//               {topics &&
//                 topics.map(topic => {
//                   return (
//                     <option key={topic.slug} value={topic.slug}>
//                       {topic.slug}
//                     </option>
//                   );
//                 })}

//               <option key="other" value="add-topic">
//                 add topic
//               </option>
//             </select>
//             {this.state.topic === "add topic" ? (
//               <NewTopic user={user} />
//             ) : (
//               <div>
//                 <label> Title</label>
//                 <input
//                   type="text"
//                   value={title}
//                   onChange={this.handleChange}
//                   name="title"
//                   required
//                 />
//                 <label> your article</label>
//                 <br />
//                 <textarea rows="4" value={body} name="body" required />
//               </div>
//             )}
//             <button type="submit"> submit article</button>
//           </form>
//         )}
//       </div>
//     );
//   }
//   toggleArticle = () => {
//     const { showArticle } = this.state;
//     this.setState({ showAddedArticle: !showArticle });
//   };

//   handleChange = event => {
//     const { name, value } = event.target;
//     this.setState({ [name]: value });
//   };

//   handleSubmit = event => {
//     event.preventDefault();
//     const { title, body, topic } = this.state;
//     const { user } = this.props;
//     submitArticle({ title, body, user, topic }).then(article => {
//       navigate(`/articles/${article.article_id}`);
//     });
//     this.setState({ title: "", topic: "", body: "" });
//     // state: { newArticle: true }
//     //     .catch(err => console.error(err));
//   };
// }

//         <label className="title">
//           {" "}
//           <h6> Title:</h6>
//         </label>
//         <input
//           type="text"
//           name="title"
//           value={title}
//           id="title-input"
//           onChange={this.handleChange}
//           required
//         />
//         <label className="Body">
//           {" "}
//           <h6> Body:</h6>
//         </label>
//         <input
//           type="text"
//           name="body"
//           value={body}
//           id="body-input"
//           onChange={this.handleChange}
//         />
//         <label className="Author">
//           {" "}
//           <h6> Author:</h6>
//         </label>
//         <input
//           onChange={this.handleChange}
//           type="text"
//           name="author"
//           id="author-input"
//         />
//         <label>
//           <h6>Select topic:</h6>
//         </label>
//         <select>
//           <option
//             type="text"
//             name="topic"
//             id="topic-input"
//             onChange={this.handleChange}
//             value="football"
//           >
//             Football
//           </option>
//           <option
//             type="text"
//             name="topic-input"
//             id="topic-input"
//             onChange={this.handleChange}
//             value="cooking"
//           >
//             Cooking
//           </option>
//           <option
//             type="text"
//             name="topic-input"
//             id="topic-input"
//             onChange={this.handleChange}
//             value="coding"
//           >
//             Coding
//           </option>
//         </select>
//         <br />
//         <button
//           type="submit"
//           className="articleButton"
//           onClick={this.toggleArticle}
//         >
//           {showArticle ? "cancel" : ` Submit `}{" "}
//         </button>
//       </form>
//     </div>
//   );
// }
//how is this effecting the state, not adding to state.
// handleChange = event => {
//   const { key, value } = event.target;
//   this.setState({ [key]: value });
// };

/* // handleBodyChange = event => {
  //   this.setState({ body: event.target.value });
  // };
  // handleAuthorChange = event => {
  //   this.setState({ author: event.target.value });
  // };
  // handleTopicChange = event => {
  //   this.setState({ topic: event.target.value });
  // }; */

//     //clicked, stop more clicking, when you quickly click twice it provides same article twice
//     //key of state and object of whatever i like.
//     //generally when you recieve data you put in state
//     //in this case we are going to navigate to another page
//     //navigate state different to react state- refers to browser history state
//     //article.article id comes from data you get back.
//   })
// }

// //need to know body/title/topic to attach it to
// //need user- based on whos logged in




//       listOpen: false,
//       headerTitle: this.props.title,
//       sorting: [
//         {
//           id: 1,
//           title: "date created",
//           selected: false,
//           key: "sort_by"
//         },
//         {
//           id: 2,
//           title: "comment_count",
//           selected: false,
//           key: "sort_by"
//         },
//         {
//           id: 3,
//           title: "votes",
//           selected: false,
//           key: "sort_by"
//         }
//       ]
//     };
//   }
//   componentDidMount() {
//     return <h1>hi</h1>;
//   }
//   handleClickOutside(e) {
//     this.setState({
//       listOpen: false
//     });
//   }
//   selectItem = (title, id, stateKey) => {
//     this.setState(
//       {
//         headerTitle: title,
//         listOpen: false
//       },
//       this.props.resetThenSet(id, stateKey)
//     );
//   };
//   toggleList = () => {
//     this.setState(prevState => ({
//       listOpen: !prevState.listOpen
//     }));
//   };
//   render() {
//     const { list } = this.props;
//     const { listOpen, headerTitle } = this.state;
//     return (
//       <div className="dd-wrapper">
//         <div className="dd-header" onClick={this.toggleList}>
//           <div className="dd-header-title">{headerTitle}</div>
//           {listOpen ? (
//             <FontAwesome name="angle-up" size="2x" />
//           ) : (
//             <FontAwesome name="angle-down" size="2x" />
//           )}{" "}
//         </div>
//         {listOpen && (
//           <ul className="dd-list">
//             {list.map(item => (
//               <li
//                 className="dd-list-item"
//                 key={item.id}
//                 onClick={() => this.selectItem(item.title, item.id, item.key)}
//               >
//                 {item.title} {item.selected && <FontAwesome name="check" />}
//               </li>
//             ))}
//           </ul>
//         )}
//       </div>
//     );
//   }
// }





****** HTML LECTURE....









